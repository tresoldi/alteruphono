#!/usr/bin/env python
# -*- coding: utf-8 -*-

# CAVEAT UTILITOR
#
# This file was automatically generated by TatSu.
#
#    https://pypi.python.org/pypi/tatsu/
#
# Any changes you make to it will be overwritten the next time
# the file is generated.


from __future__ import print_function, division, absolute_import, unicode_literals

import sys

from tatsu.buffering import Buffer
from tatsu.parsing import Parser
from tatsu.parsing import tatsumasu, leftrec, nomemo
from tatsu.parsing import leftrec, nomemo  # noqa
from tatsu.util import re, generic_main  # noqa


KEYWORDS = {}  # type: ignore


class SOUND_CHANGEBuffer(Buffer):
    def __init__(
        self,
        text,
        whitespace=None,
        nameguard=None,
        comments_re=None,
        eol_comments_re=None,
        ignorecase=None,
        namechars='',
        **kwargs
    ):
        super(SOUND_CHANGEBuffer, self).__init__(
            text,
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            namechars=namechars,
            **kwargs
        )


class SOUND_CHANGEParser(Parser):
    def __init__(
        self,
        whitespace=None,
        nameguard=None,
        comments_re=None,
        eol_comments_re=None,
        ignorecase=None,
        left_recursion=True,
        parseinfo=True,
        keywords=None,
        namechars='',
        buffer_class=SOUND_CHANGEBuffer,
        **kwargs
    ):
        if keywords is None:
            keywords = KEYWORDS
        super(SOUND_CHANGEParser, self).__init__(
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            left_recursion=left_recursion,
            parseinfo=parseinfo,
            keywords=keywords,
            namechars=namechars,
            buffer_class=buffer_class,
            **kwargs
        )

    @tatsumasu()
    def _start_(self):  # noqa
        with self._choice():
            with self._option():
                self._SEQUENCE_()
                self.name_last_node('ante')
                self._ARROW_()
                self._SEQUENCE_()
                self.name_last_node('post')
                self._SLASH_()
                self._SEQUENCE_()
                self.name_last_node('context')
                self._check_eof()
            with self._option():
                self._SEQUENCE_()
                self.name_last_node('ante')
                self._ARROW_()
                self._SEQUENCE_()
                self.name_last_node('post')
                self._check_eof()
            self._error('no available options')
        self.ast._define(
            ['ante', 'context', 'post'],
            []
        )

    @tatsumasu()
    def _SEQUENCE_(self):  # noqa

        def block0():
            self._SEQUENCE_ELEMENT_()
        self._positive_closure(block0)

    @tatsumasu()
    def _SEQUENCE_ELEMENT_(self):  # noqa
        with self._choice():
            with self._option():

                def sep0():
                    self._token('|')

                def block0():
                    self._SEGMENT_()
                    self.name_last_node('@')
                self._positive_gather(block0, sep0)
            with self._option():
                self._FOCUS_()
                self.name_last_node('focus')
            self._error('no available options')
        self.ast._define(
            ['focus'],
            []
        )

    @tatsumasu()
    def _SEGMENT_(self):  # noqa
        with self._choice():
            with self._option():
                self._BOUNDARY_()
                self.name_last_node('boundary')
            with self._option():
                self._EMPTY_()
                self.name_last_node('empty')
            with self._option():
                self._BACKREF_()
            with self._option():
                self._SOUND_CLASS_()
            with self._option():
                self._ipa_()
            self._error('no available options')
        self.ast._define(
            ['boundary', 'empty'],
            []
        )

    @tatsumasu()
    def _FEATURE_KEY_(self):  # noqa
        self._pattern('[a-z][a-z0-9_-]+')

    @tatsumasu()
    def _FEATURE_(self):  # noqa
        with self._choice():
            with self._option():
                with self._group():
                    with self._choice():
                        with self._option():
                            self._token('+')
                        with self._option():
                            self._token('-')
                        with self._option():
                            self._token('!')
                        self._error('no available options')
                self.name_last_node('value')
                self._FEATURE_KEY_()
                self.name_last_node('key')
            with self._option():
                self._FEATURE_KEY_()
                self.name_last_node('key')
                self._token('=')
                with self._group():
                    with self._choice():
                        with self._option():
                            self._token('true')
                        with self._option():
                            self._token('false')
                        self._error('no available options')
                self.name_last_node('value')
            with self._option():
                self._FEATURE_KEY_()
                self.name_last_node('key')
            self._error('no available options')
        self.ast._define(
            ['key', 'value'],
            []
        )

    @tatsumasu()
    def _MODIFIER_(self):  # noqa
        with self._optional():
            self._RECONS_()
            self.name_last_node('recons')
        self._token('[')

        def sep1():
            self._token(',')

        def block1():
            self._FEATURE_()
            self.add_last_node_to_name('@')
        self._positive_gather(block1, sep1)
        self._token(']')
        self.ast._define(
            ['recons'],
            []
        )

    @tatsumasu()
    def _BACKREF_(self):  # noqa
        with self._choice():
            with self._option():
                with self._optional():
                    self._RECONS_()
                    self.name_last_node('recons')
                self._token('@')
                self._pattern('[0-9]+')
                self.name_last_node('backref')
                self._MODIFIER_()
                self.name_last_node('modifier')
            with self._option():
                with self._optional():
                    self._RECONS_()
                    self.name_last_node('recons')
                self._token('@')
                self._pattern('[0-9]+')
                self.name_last_node('backref')
            self._error('no available options')
        self.ast._define(
            ['backref', 'modifier', 'recons'],
            []
        )

    @tatsumasu()
    def _SOUND_CLASS_LABEL_(self):  # noqa
        self._pattern('[A-Z][A-Z0-9]*')

    @tatsumasu()
    def _SOUND_CLASS_(self):  # noqa
        with self._choice():
            with self._option():
                with self._optional():
                    self._RECONS_()
                    self.name_last_node('recons')
                self._SOUND_CLASS_LABEL_()
                self.name_last_node('sound_class')
                self._MODIFIER_()
                self.name_last_node('modifier')
            with self._option():
                with self._optional():
                    self._RECONS_()
                    self.name_last_node('recons')
                self._SOUND_CLASS_LABEL_()
                self.name_last_node('sound_class')
            self._error('no available options')
        self.ast._define(
            ['modifier', 'recons', 'sound_class'],
            []
        )

    @tatsumasu()
    def _FOCUS_(self):  # noqa
        self._token('_')

    @tatsumasu()
    def _BOUNDARY_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('#')
            with self._option():
                self._token('^')
            with self._option():
                self._token('$')
            self._error('no available options')

    @tatsumasu()
    def _EMPTY_(self):  # noqa
        with self._choice():
            with self._option():
                self._token(':null:')
            with self._option():
                self._token('0')
            self._error('no available options')

    @tatsumasu()
    def _ipa_(self):  # noqa
        with self._optional():
            self._RECONS_()
            self.name_last_node('recons')
        self._pattern('[^ @_#^$=>0|*\\/\\-]+')
        self.name_last_node('grapheme')
        self.ast._define(
            ['grapheme', 'recons'],
            []
        )

    @tatsumasu()
    def _RECONS_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('*')
            with self._option():
                self._token('**')
            self._error('no available options')

    @tatsumasu()
    def _ARROW_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('==>')
            with self._option():
                self._token('-->')
            with self._option():
                self._token('->')
            with self._option():
                self._token('=>')
            with self._option():
                self._token('>')
            with self._option():
                self._token('→')
            with self._option():
                self._token('⇒')
            with self._option():
                self._token('⇾')
            with self._option():
                self._token('»')
            self._error('no available options')

    @tatsumasu()
    def _SLASH_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('//')
            with self._option():
                self._token('/')
            self._error('no available options')


class SOUND_CHANGESemantics(object):
    def start(self, ast):  # noqa
        return ast

    def SEQUENCE(self, ast):  # noqa
        return ast

    def SEQUENCE_ELEMENT(self, ast):  # noqa
        return ast

    def SEGMENT(self, ast):  # noqa
        return ast

    def FEATURE_KEY(self, ast):  # noqa
        return ast

    def FEATURE(self, ast):  # noqa
        return ast

    def MODIFIER(self, ast):  # noqa
        return ast

    def BACKREF(self, ast):  # noqa
        return ast

    def SOUND_CLASS_LABEL(self, ast):  # noqa
        return ast

    def SOUND_CLASS(self, ast):  # noqa
        return ast

    def FOCUS(self, ast):  # noqa
        return ast

    def BOUNDARY(self, ast):  # noqa
        return ast

    def EMPTY(self, ast):  # noqa
        return ast

    def ipa(self, ast):  # noqa
        return ast

    def RECONS(self, ast):  # noqa
        return ast

    def ARROW(self, ast):  # noqa
        return ast

    def SLASH(self, ast):  # noqa
        return ast


def main(filename, start=None, **kwargs):
    if start is None:
        start = 'start'
    if not filename or filename == '-':
        text = sys.stdin.read()
    else:
        with open(filename) as f:
            text = f.read()
    parser = SOUND_CHANGEParser()
    return parser.parse(text, rule_name=start, filename=filename, **kwargs)


if __name__ == '__main__':
    import json
    from tatsu.util import asjson

    ast = generic_main(main, SOUND_CHANGEParser, name='SOUND_CHANGE')
    print('AST:')
    print(ast)
    print()
    print('JSON:')
    print(json.dumps(asjson(ast), indent=2))
    print()
