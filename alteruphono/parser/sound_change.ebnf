// Grammar for sound change formal notation
//
// Part of the `alteruphono` library (https://github.com/tresoldi/alteruphono)

// TODOs:
//   - allow segment from descriptor (i.e., from modifier)
//   - add reconstruction flag (only "*" for the time being)
//   - allow values besides "true" and "false" for feature descriptions
//   - the current list of `grapheme` is not allowing for potentially
//     desirable graphemes (such as "@", used in X-SAMPA)
//   - allow comments after rule
//   - add "~" as a complement notation?

// The main symbol `rule` is defined as a "sound change rule" including
// the three basic elements: an `ante` sequence (mandatory), a `post`
// sequence (mandatory), and a `context` sequence (optional). `ante` and
// `post` are separated by `arrow` terminals; `post` and `context` are
// separated by `slash` terminals. Note that we match the end of string
// EOF, to guarantee that no extra material is included (such as comments).
rule <-
    ante arrow post (slash context)? EOF
    ;

// Define the three sequences in the rule.
// TODO: Be more precise with the elements that are allowed in each one,
//       such as only allowing focus in context and (to be decided) not
//       allowing back-references in context.
ante <-
    sequence
    ;
post <-
    sequence
    ;
context <-
    sequence
    ;

// Collect a sequence of `segment`s, with `choice`s collected as lists.
// Note that `focus` is not listed among `segment`s, as it cannot be
// repeated or used in an alternative by our definition.
sequence <-
    sequence_element+
    ;
sequence_element <-
    focus /
    segment
    ;

// Define a "segment", the basic sound or position unit, which might include
// choices (alternatives) and set correspondences, thus being collected as
// a list and requiring more precise handling. `choice` is the first item
// in the list to guarantee, via PEG parsing, that we don't parse only the
// first element of the choice as a singleton.
segment <-
    choice /
    set /
    boundary /
    empty /
    backref /
    sound_class /
    grapheme
    ;

// Define choices and sets and the singletons that can be part of it.
// TODO: allow optional parentheses, such as "(p|b)" and "!(p|b)"; note, in
//       fact, the potential bug when the first item of the choice is
//       the /!/ click.
choice <-
    r"!" singleton ("|" singleton)+ /
    singleton ("|" singleton)+
    ;
set <-
    "{" singleton ("," singleton)+ "}"
    ;
singleton <-
    boundary /
    empty /
    backref /
    sound_class /
    grapheme
    ;

// Define feature keys, features (which include keys and values), and feature
// descriptions (i.e., multiple features).
// As features can change across experiments, also due to named tiers,
// there is no point in listing the features; we accept any valid identifier
// as a key, delegating validation to code. Identifiers are composed of
// lowercase letters, digits, underscores, and dashes, with the first
// character a letter. In features, values can either precede keys as an
// operator, or follow them (separated by spaces) as a string value.
// Features composed only of feature keys are accepted, with an implied
// positive value added during parsing/visitation.
// Feature descriptions are composed of multiple features enclosed by
// square brackets and separated by commas.
feature_key <-
    r'[a-z][a-z0-9_-]+'
    ;
op_feature <-
    (r'\+|\-|!')? feature_key
    ;
feature_val <-
    feature_key r'=' r'true|false'
    ;
feature <-
    feature_val /
    op_feature
    ;
feature_list <-
    feature ("," feature)*
    ;
modifier <-
    r'\[' feature_list r'\]'
    ;

// Sound class labels are identifiers in uppercase letters or digits, with
// the first character obligatorily a letter. Sound classes can carry
// their own modifiers.
sound_class <-
    r"!" r'[A-Z][A-Z0-9_]*' (modifier)? /
    r'[A-Z][A-Z0-9_]*' (modifier)?
    ;

// Defines a back-reference. By specification, list indexes are 1-based.
// Back-references can carry their own modifiers.
backref <-
    r'@' r'[0-9]+' (modifier)?
    ;

// Define a grapheme, most of the time an IPA grapheme (but validation is
// not performed in the grammar). Almost all symbols are allowed, with the
// few excluded in the regex more to avoid confusion than requirement.
// graphemes can carry their own modifiers.
grapheme <-
    r'[^ \[\]\{\}|,/>@-]+' (modifier)?
    ;

// Define additional capture symbols (terminals).
focus <-
    r'_'
    ;
boundary <-
    r'#'
    ;
empty <-
    r':null:|0'
    ;

// Define terminals for structure, not captured.
arrow <-
    r'->|â†’|>'
    ;
slash <-
    r'/'
    ;
